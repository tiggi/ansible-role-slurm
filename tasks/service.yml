---
  - name: install slurm service specific packages
    package: "name={{ item }} state=present"
    with_items: "{{ slurm_service_packages }}"

  - name: does the munge.key exist?
    stat: path=/etc/munge/munge.key
    register: mungekeystat
    always_run: True
    ignore_errors: True

  - name: create munge key
    command: /usr/sbin/create-munge-key creates=/etc/munge/munge.key
    register: mungekeygen
    when: mungekeystat is defined and mungekeystat.stat.exists == False

  - name: Fetch munge key from Service node for distribution to nodes
    fetch: src=/etc/munge/munge.key
           dest=files/munge.key
           fail_on_missing=yes
           flat=yes

  - name: create slurm_munge_key_nfs_dir
    file: path={{ slurm_munge_key_nfs_dir }} state=directory owner=root group={{ admingroup }} mode=0750
    when: slurm_munge_key_to_nfs

  - name: copy munge.key to slurm_munge_key_nfs_dir too
    copy: src=files/munge.key dest={{ slurm_munge_key_nfs }} mode=0400 owner=munge group=munge
    when: slurm_munge_key_to_nfs

# a few remaining slurm_build tasks
  - include: build_service.yml
    when: "slurm_build == True and 'slurm_service' in group_names and ansible_os_family == 'RedHat'"

  - name: add slurm unix group
    group: name=slurm system=no state=present
    register: reg_slurm_unixgroup

  - name: add slurm unix user
    user: name=slurm shell=/sbin/nologin createhome=no system=no append=yes group=slurm state=present
    register: reg_slurm_unixuser

  - name: add slurm log dir
    file: "path={{ slurm_log_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm tmp dir
    file: "path={{ slurmd_tmp_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm state dir
    file: "path={{ slurm_state_dir }} state=directory owner=slurm group=slurm mode=0750"

  - name: add slurm etc dir
    file: path="/etc/slurm" state=directory owner=root group=root mode=0755

  - name: Update NIS DB
    command: /usr/bin/make -C /var/yp
    when: nis_server and (reg_slurm_unixgroup.changed or reg_slurm_unixuser.changed)

  - name: restart munge
    service: name=munge state=restarted
    when: mungekeygen.changed and mungekeygen is defined

  - name: start and enable munge
    service: name=munge state=started enabled=yes

  - name: copy in munge key to slurm_accounting_storage_host too if it is different than the service node
    copy: src=files/munge.key
          dest=/etc/munge/munge.key
          owner=munge
          group=munge
          mode=0400
    delegate_to: "{{ slurm_accounting_storage_host }}"
    when: slurm_accounting_storage_host != ansible_hostname
    notify:
     - restart munge

  - name: start and enable munge on the slurm_accounting_storage_host too if it is different than the service node
    service: name=munge state=started enabled=yes
    delegate_to: "{{ slurm_accounting_storage_host }}"
    when: slurm_accounting_storage_host != ansible_hostname

  - name: Increase net.core.somaxconn for slurmctld
    sysctl: name=net.core.somaxconn
            value={{ slurm_sysctl_core_somaxconn }}
            sysctl_file=/etc/sysctl.d/50-slurm.conf
    when: slurm_manage_sysctl

  - name: Increase net.ipv4.tcp_max_syn_backlog for slurmctld
    sysctl: name=net.ipv4.tcp_max_syn_backlog
            value={{ slurm_sysctl_tcp_max_syn_backlog }}
            sysctl_file=/etc/sysctl.d/50-slurm.conf
    when: slurm_manage_sysctl

  - name: install Slurm ( state=present - not updating )
    package: name={{ item }} state=present
    with_items: "{{ slurm_packages }}"

    # slurmdbd needs to be started after the slurm unix user is created
  - name: start and enable slurmdbd on slurm_accounting_storage_host
    service: name=slurmdbd state=started enabled=yes
    delegate_to: "{{ slurm_accounting_storage_host }}"
    when: slurm_accounting_storage_host != ansible_hostname

  - name: start and enable slurmdbd
    service: name=slurmdbd state=started enabled=yes
    when: slurm_accounting_storage_host == ansible_hostname

  - name: sacctmgr show cluster siteName and store in slurm_clusterlist variable
    command: "sacctmgr -n show cluster {{ siteName }}"
    register: slurm_clusterlist
    always_run: yes
    changed_when: False

  - name: add cluster to accounting
    command: "sacctmgr -i add cluster {{ siteName }}"
    when: slurm_clusterlist.stdout.find("{{siteName}}") == -1

  - name: disable the slurm init script slurm on el7
    service: name=slurm enabled=no
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: start and enable slurmctld
    service: name={{ slurmctld_service }} state=started enabled=yes
